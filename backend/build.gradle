plugins {
    id "java"
    id "idea"
    id "org.unbroken-dome.test-sets" version "4.0.0"
    id "com.github.johnrengelman.shadow" version "7.1.2"
    id "nu.studer.jooq" version "7.1.1"
}

sourceCompatibility = JavaVersion.VERSION_17
targetCompatibility = JavaVersion.VERSION_17

testSets {
    testFunctional
}
check.dependsOn testFunctional
testFunctional.mustRunAfter test

dependencies {
    implementation "ch.qos.logback:logback-core:$logbackVersion"
    implementation "ch.qos.logback:logback-classic:$logbackVersion"
    implementation "org.slf4j:slf4j-api:$slf4JVersion"

    implementation "io.javalin:javalin:$javalinVersion"

    implementation "org.apache.commons:commons-lang3:$commonsLang3Version"

    implementation "com.fasterxml.jackson.core:jackson-databind:$jacksonVersion"
    implementation "com.fasterxml.jackson.datatype:jackson-datatype-jdk8:$jacksonVersion"
    implementation "com.fasterxml.jackson.datatype:jackson-datatype-jsr310:$jacksonVersion"

    implementation "org.postgresql:postgresql:$postgresqlVersion"
    implementation "org.flywaydb:flyway-core:$flywayVersion"
    implementation "org.jooq:jooq:$jooqVersion"

    testImplementation "org.assertj:assertj-core:$assertjVersion"

    testImplementation "org.junit.jupiter:junit-jupiter-api:$junitVersion"
    testImplementation "org.junit.jupiter:junit-jupiter-params:$junitVersion"
    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:$junitVersion"

    testImplementation "org.testcontainers:postgresql:$testcontainersPostgresqlVersion"

    jooqGenerator "com.github.sabomichal:jooq-meta-postgres-flyway:$jooqMetaVersion"
}

tasks.withType(Test) {
    useJUnitPlatform()
}

test {
    useJUnitPlatform()
}

repositories {
    mavenCentral()
}

jooq {
    configurations {
        main {
            generateSchemaSourceOnCompilation = true
            generationTool {
                generator {
                    database {
                        name = "com.github.sabomichal.jooq.PostgresDDLDatabase"
                        inputSchema = "public"
                        includes = "public.*"
                        excludes = "flyway_schema_history"
                        recordTimestampFields = "UPDATED_DATE"
                        properties {
                            property {
                                key = "locations"
                                value = "src/main/resources/migrations"
                            }
                            property {
                                key = "dockerImage"
                                value = "postgres:14"
                            }
                        }
                        forcedTypes {
                            forcedType {
                                types = "TIMESTAMP"
                                converter = "io.github.hackfs2022.repository.JooqTimestampConverter"
                                userType = "java.time.Instant"
                            }
                        }
                    }
                    target {
                        packageName = "io.github.hackfs2022.db.schema"
                        directory = "src/generated/java"
                    }

                }
            }
        }
    }
}

wrapper {
    gradleVersion = "7.5"
}

jar.enabled = false
shadowJar {
    archiveBaseName.set("hack-fs-app")
    archiveClassifier.set("")
    archiveVersion.set("")
    mergeServiceFiles()

    jar.manifest.attributes(["Main-Class": "io.github.hackfs2022.HackFsApp"])
}
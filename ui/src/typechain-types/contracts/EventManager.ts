/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export interface EventManagerInterface extends utils.Interface {
  functions: {
    "buyTicket(address)": FunctionFragment;
    "claimQrCode(address,uint16,string)": FunctionFragment;
    "createEvent(string,string,string,uint16)": FunctionFragment;
    "createdEvents(uint256)": FunctionFragment;
    "fee()": FunctionFragment;
    "owner()": FunctionFragment;
    "withdraw()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "buyTicket"
      | "claimQrCode"
      | "createEvent"
      | "createdEvents"
      | "fee"
      | "owner"
      | "withdraw"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "buyTicket",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "claimQrCode",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "createEvent",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "createdEvents",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "fee", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "withdraw", values?: undefined): string;

  decodeFunctionResult(functionFragment: "buyTicket", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "claimQrCode",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createEvent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createdEvents",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "fee", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;

  events: {
    "EventCreated(address)": EventFragment;
    "QrCodeClaimed(address,uint16,string)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "EventCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "QrCodeClaimed"): EventFragment;
}

export interface EventCreatedEventObject {
  eventAddress: string;
}
export type EventCreatedEvent = TypedEvent<[string], EventCreatedEventObject>;

export type EventCreatedEventFilter = TypedEventFilter<EventCreatedEvent>;

export interface QrCodeClaimedEventObject {
  eventAddress: string;
  tokenId: number;
  qrCodeId: string;
}
export type QrCodeClaimedEvent = TypedEvent<
  [string, number, string],
  QrCodeClaimedEventObject
>;

export type QrCodeClaimedEventFilter = TypedEventFilter<QrCodeClaimedEvent>;

export interface EventManager extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: EventManagerInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    buyTicket(
      eventAddress: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    claimQrCode(
      eventAddress: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      qrCodeId: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    createEvent(
      eventName: PromiseOrValue<string>,
      eventSymbol: PromiseOrValue<string>,
      eventURI: PromiseOrValue<string>,
      ticketsTotal: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    createdEvents(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    fee(overrides?: CallOverrides): Promise<[BigNumber]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    withdraw(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  buyTicket(
    eventAddress: PromiseOrValue<string>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  claimQrCode(
    eventAddress: PromiseOrValue<string>,
    tokenId: PromiseOrValue<BigNumberish>,
    qrCodeId: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  createEvent(
    eventName: PromiseOrValue<string>,
    eventSymbol: PromiseOrValue<string>,
    eventURI: PromiseOrValue<string>,
    ticketsTotal: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  createdEvents(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  fee(overrides?: CallOverrides): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  withdraw(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    buyTicket(
      eventAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<number>;

    claimQrCode(
      eventAddress: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      qrCodeId: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    createEvent(
      eventName: PromiseOrValue<string>,
      eventSymbol: PromiseOrValue<string>,
      eventURI: PromiseOrValue<string>,
      ticketsTotal: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    createdEvents(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    fee(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    withdraw(overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    "EventCreated(address)"(eventAddress?: null): EventCreatedEventFilter;
    EventCreated(eventAddress?: null): EventCreatedEventFilter;

    "QrCodeClaimed(address,uint16,string)"(
      eventAddress?: null,
      tokenId?: null,
      qrCodeId?: null
    ): QrCodeClaimedEventFilter;
    QrCodeClaimed(
      eventAddress?: null,
      tokenId?: null,
      qrCodeId?: null
    ): QrCodeClaimedEventFilter;
  };

  estimateGas: {
    buyTicket(
      eventAddress: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    claimQrCode(
      eventAddress: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      qrCodeId: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    createEvent(
      eventName: PromiseOrValue<string>,
      eventSymbol: PromiseOrValue<string>,
      eventURI: PromiseOrValue<string>,
      ticketsTotal: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    createdEvents(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    fee(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    withdraw(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    buyTicket(
      eventAddress: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    claimQrCode(
      eventAddress: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      qrCodeId: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    createEvent(
      eventName: PromiseOrValue<string>,
      eventSymbol: PromiseOrValue<string>,
      eventURI: PromiseOrValue<string>,
      ticketsTotal: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    createdEvents(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    fee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    withdraw(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
